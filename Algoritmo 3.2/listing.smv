MODULE main
VAR
    turno: {p, q};
    proc_p: process proc(p, turno);
    proc_q: process proc(q, turno);
ASSIGN
    init(turno) := p;


 --mutua esclusione
SPEC AG(proc_p.stato=l3 -> proc_q.stato!=l3) & AG(proc_q.stato=l3 -> proc_p.stato!=l3);

--assenza di deadlock (ovvero almeno un processo continua nella sua esecuzione per fare evolvere il sistema)
SPEC AG EF proc_p.stato=l1 &  AF EG proc_q.stato=l1;

--assenza di deadlock come definita nelle slides
SPEC AG ((proc_p.stato=l2 | proc_q.stato=l2) -> AF (proc_p.stato=l3 | proc_q.stato=l3));

--template del mio processo in nusmv
MODULE proc(identita, turno)
VAR
    stato : {l1, l2, l3, l4}; --l1 come per dire linea 1 del codice originale
ASSIGN
    init(stato) := l1;
    next(stato) :=
        case
            stato = l1: {l1, l2}; --scelta non deterministica per o rimanere non in sezione non critica oppure se procedere a fare richiesta per entrarci
            stato = l2: case
                            turno=identita: l3;
                            TRUE: stato;
                        esac;
            stato = l3: l4;
            stato = l4: l1;
            TRUE: stato;
        esac;

    next(turno):=
                case --qua vado a vedere in modo esplicito che tipo di turno ho e lo vado a cambiare!
                    stato=l4 & turno=identita & identita=p: q;
                    stato=l4 & turno=identita & identita=q: p;
                    TRUE: turno;
                esac;
FAIRNESS running; 
 --assenza di starvation individuale (ovvero il processo continua a procedere nella sua evoluzione quando richiede di entrare in sezione critica)
SPEC AG(stato=l2 -> AF stato=l3);



