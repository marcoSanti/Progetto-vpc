--OCCCHIO CHE QUA CI STA UNA COSA DA NOTARE:
--IN GREATSPN HO CHE LA PROP DI ASSENZA DI STARVATION NN È VERIFICATA
--MA QUESTO PERCHÈ HO UNA SITUAZIONE IN CUI SE ENTRAMBI I PROCESSI ARRIVANO IN P1 IN PARALLELO
--POI PER ESEMPIO PROC Q RESTA SEMPRE LI MENTRE PROC P2 CONTINUA A EVOLVERE.
--QUESTO CAUSATO DA ASSENZA DI FAIRNESS RUNNNING IN GREATSPN. POSSIBILE FIX CON ARCHI PRIORITÀ

MODULE main
VAR
    want_p_var: boolean;
    want_q_var: boolean;


    proc_p: process proc(want_p_var, want_q_var);
    proc_q: process proc(want_q_var, want_p_var);

ASSIGN
    init(want_p_var):=FALSE;
    init(want_q_var):=FALSE;

 --mutua esclusione
SPEC AG(proc_p.stato=l4 -> proc_q.stato!=l4) & AG(proc_q.stato=l4 -> proc_p.stato!=l4);

--assenza di deadlock (ovvero almeno un processo continua nella sua esecuzione per fare evolvere il sistema)
SPEC AG EF proc_p.stato=l1 |  AG EF proc_q.stato=l1;

--assenza di deadlock come definita nelle slides
SPEC AG ((proc_p.stato=l3 | proc_q.stato=l3) -> AF (proc_p.stato=l4 | proc_q.stato=l4));


MODULE proc( want_io, want_altro)
VAR 
    stato : {l1, l3, l4}; --l come linea del codice equivalente
ASSIGN
    init(stato) := l1;
    next(stato) :=
        case
            stato=l1 & want_altro=FALSE:{l1, l3}; --se sono in stato l1, evolvo in l3 andando a settare want_io a true 
            stato=l3: l4; --sezione critica
            stato=l4: l1; --ritorno a l1
            TRUE: stato;
        esac;
    
    next(want_io) :=
        case      
            stato=l3:TRUE; --se in ingresso di sezione critica metto la mia want_io a true
            stato=l4: FALSE; --se sono in l4 (sez crica), il next step sarà l1 e quindi setto a falso want_io
            TRUE:want_io;
        esac;


FAIRNESS running; 
SPEC AG( stato=l3 -> AF stato=l4 );  --assenza di starvation individuale (ovvero se faccio richeista prima o poi nel futuro entro ) 



